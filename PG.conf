
/************** PG COMMON METRICS ********************/

apply Service "ccp_connection_stats_active" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_connection_stats_active"

  //vars.pg_compare  = "1"
  //vars.pg_warning = host.vars.pg_warning
  //vars.pg_critical = host.vars.pg_critical
  //vars.pg_include = host.vars.pg_include
  //vars.pg_exclude = host.vars.pg_exclude

  assign where host.vars.pg_common == "true"
}

apply Service "ccp_connection_stats_idle" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_connection_stats_idle"

  //vars.pg_compare  = "1"
  //vars.pg_warning = host.vars.pg_warning
  //vars.pg_critical = host.vars.pg_critical
  //vars.pg_include = host.vars.pg_include
  //vars.pg_exclude = host.vars.pg_exclude

  assign where host.vars.pg_common == "true"
}

apply Service "ccp_connection_stats_idle_in_txn" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_connection_stats_idle_in_txn"

  //vars.pg_compare  = "1"
  //vars.pg_warning = host.vars.pg_warning
  //vars.pg_critical = host.vars.pg_critical
  //vars.pg_include = host.vars.pg_include
  //vars.pg_exclude = host.vars.pg_exclude

  assign where host.vars.pg_common == "true"
}


apply Service "ccp_connection_stats_max_idle_in_txn_time" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_connection_stats_max_idle_in_txn_time"
  vars.pg_compare  = "1"

  vars.pg_warning = host.vars.ccp_connection_stats_max_idle_in_txn_time_warning
  if (host.vars.ccp_connection_stats_max_idle_in_txn_time_warning == "") {
	vars.pg_warning = "1800"
  }
  vars.pg_critical = host.vars.ccp_connection_stats_max_idle_in_txn_time_critical
  if (host.vars.ccp_connection_stats_max_idle_in_txn_time_critical == "") {
  	vars.pg_critical = "3600"
  } 

  assign where host.vars.pg_common == "true"
}


apply Service "ccp_connection_stats_max_query_time" {

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_connection_stats_max_query_time"
  vars.pg_compare  = "1"

  vars.pg_warning = host.vars.ccp_connection_stats_max_query_time_warning
  if (host.vars.ccp_connection_stats_max_query_time_warning == "") {
	vars.pg_warning = "43200"
  }
  vars.pg_critical = host.vars.ccp_connection_stats_query_time_critical
  if (host.vars.ccp_connection_stats_max_query_time_critical == "") {
  	vars.pg_critical = "86400"
  } 

  assign where host.vars.pg_common == "true"
}


apply Service "ccp_connection_stats_max_connections" {
  import "generic-service"

  check_command = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_connection_stats_max_connections"

  assign where host.vars.pg_common == "true"
}

/*** Need to consolidate query results
 *apply Service "ccp_locks_count" {
 *  import "generic-service"
 *
 *  check_command    = "pg_metric"
 *  vars.pg_url      = host.vars.pg_url_postgres
 *  vars.pg_action   = "ccp_locks_count"
 *
 *  //vars.pg_compare  = "1"
 *  //vars.pg_warning = host.vars.pg_warning
 *  //vars.pg_critical = host.vars.pg_critical
 *  vars.pg_include  = host.vars.ccp_locks_count_include
 *  vars.pg_exclude = host.vars.ccp_locks_count_exclude
 *
 *  assign where host.vars.pg_common == "true"
 *}
**/

apply Service "ccp_stat_database_blks_hit" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_stat_database_blks_hit"
  //vars.pg_compare  = "1"
  //vars.pg_warning = host.vars.pg_warning
  //vars.pg_critical = host.vars.pg_critical
  //vars.pg_include = host.vars.pg_include
  //vars.pg_exclude = host.vars.pg_exclude

  assign where host.vars.pg_common == "true"
}

apply Service "ccp_stat_database_blks_read" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_stat_database_blks_read"
  //vars.pg_compare  = "1"
  //vars.pg_warning = host.vars.pg_warning
  //vars.pg_critical = host.vars.pg_critical
  //vars.pg_include = host.vars.pg_include
  //vars.pg_exclude = host.vars.pg_exclude

  assign where host.vars.pg_common == "true"
}

/************** END PG COMMON METRICS ********************/ 


/************* PRIMARY ONLY *********************/
apply Service "ccp_database_size_bytes" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_database_size_bytes"

  //vars.pg_compare  = "1"
  //vars.pg_warning = host.vars.pg_warning
  //vars.pg_critical = host.vars.pg_critical
  //vars.pg_include = host.vars.pg_include
  //vars.pg_exclude = host.vars.pg_exclude

  assign where host.vars.pg_primary == "true"
}


apply Service "ccp_stat_bgwriter_buffers_alloc" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_stat_bgwriter_buffers_alloc"
  //vars.pg_compare  = "1"
  //vars.pg_warning = host.vars.pg_warning
  //vars.pg_critical = host.vars.pg_critical
  //vars.pg_include = host.vars.pg_include
  //vars.pg_exclude = host.vars.pg_exclude

  assign where host.vars.pg_primary == "true"
}

apply Service "ccp_stat_bgwriter_buffers_backend" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_stat_bgwriter_buffers_backend"
  //vars.pg_compare  = "1"
  //vars.pg_warning = host.vars.pg_warning
  //vars.pg_critical = host.vars.pg_critical
  //vars.pg_include = host.vars.pg_include
  //vars.pg_exclude = host.vars.pg_exclude

  assign where host.vars.pg_primary == "true"
}

apply Service "ccp_stat_bgwriter_buffers_backend_fsync" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_stat_bgwriter_buffers_backend_fsync"
  //vars.pg_compare  = "1"
  //vars.pg_warning = host.vars.pg_warning
  //vars.pg_critical = host.vars.pg_critical
  //vars.pg_include = host.vars.pg_include
  //vars.pg_exclude = host.vars.pg_exclude

  assign where host.vars.pg_primary == "true"
}

apply Service "ccp_stat_bgwriter_buffers_checkpoint" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_stat_bgwriter_buffers_checkpoint"
  //vars.pg_compare  = "1"
  //vars.pg_warning = host.vars.pg_warning
  //vars.pg_critical = host.vars.pg_critical
  //vars.pg_include = host.vars.pg_include
  //vars.pg_exclude = host.vars.pg_exclude

  assign where host.vars.pg_primary == "true"
}

apply Service "ccp_stat_bgwriter_buffers_clean" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_stat_bgwriter_buffers_clean"
  //vars.pg_compare  = "1"
  //vars.pg_warning = host.vars.pg_warning
  //vars.pg_critical = host.vars.pg_critical
  //vars.pg_include = host.vars.pg_include
  //vars.pg_exclude = host.vars.pg_exclude

  assign where host.vars.pg_primary == "true"
}

apply Service "ccp_stat_database_deadlocks" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_stat_database_deadlocks"
  //vars.pg_compare  = "1"
  //vars.pg_warning = host.vars.pg_warning
  //vars.pg_critical = host.vars.pg_critical
  //vars.pg_include = host.vars.pg_include
  //vars.pg_exclude = host.vars.pg_exclude

  assign where host.vars.pg_primary == "true"
}

apply Service "ccp_stat_database_xact_commit" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_stat_database_xact_commit"
  //vars.pg_compare  = "1"
  //vars.pg_warning = host.vars.pg_warning
  //vars.pg_critical = host.vars.pg_critical
  //vars.pg_include = host.vars.pg_include
  //vars.pg_exclude = host.vars.pg_exclude

  assign where host.vars.pg_primary == "true"
}

apply Service "ccp_stat_database_xact_rollback" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_stat_database_xact_rollback"
  //vars.pg_compare  = "1"
  //vars.pg_warning = host.vars.pg_warning
  //vars.pg_critical = host.vars.pg_critical
  //vars.pg_include = host.vars.pg_include
  //vars.pg_exclude = host.vars.pg_exclude

  assign where host.vars.pg_primary == "true"
}

apply Service "ccp_transaction_wraparound_percent_towards_emergency_autovac" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_transaction_wraparound_percent_towards_emergency_autovac"
  vars.pg_compare  = "1"
  vars.pg_warning = host.vars.ccp_transaction_wraparound_percent_towards_emergency_autovac_warning
  if (host.vars.ccp_transaction_wraparound_percent_towards_emergency_autovac_warning == "") {
    vars.pg_warning = "75"
  }
  vars.pg_critical = host.vars.ccp_transaction_wraparound_percent_towards_emergency_autovac_critical
  if (host.vars.ccp_transaction_wraparound_percent_towards_emergency_autovac_critical == "") {
    vars.pg_critical = "90"
  }
  assign where host.vars.pg_primary == "true"
}

apply Service "ccp_transaction_wraparound_percent_towards_wraparound" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_transaction_wraparound_percent_towards_wraparound"
  vars.pg_compare  = "1"
  vars.pg_warning = host.vars.ccp_transaction_wraparound_percent_towards_wraparound_warning
  if (host.vars.ccp_transaction_wraparound_percent_towards_wraparound_warning == "") {
    vars.pg_warning = "50"
  }
  vars.pg_critical = host.vars.ccp_transaction_wraparound_percent_towards_wraparound_critical
  if (host.vars.ccp_transaction_wraparound_percent_towards_wraparound_critical == "") {
    vars.pg_critical = "70" 
  }

  assign where host.vars.pg_primary == "true"
}
/************* END PRIMARY ONLY *********************/


/************ PRIMARY WITH STREAMING REPLICA ONLY ******************/

apply Service "ccp_replication_lag_size_bytes" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_replication_lag_size_bytes"
  vars.pg_compare  = "1"

  vars.pg_warning = host.vars.ccp_replication_lag_size_bytes_warning
  if (host.vars.ccp_replication_lag_size_bytes_warning == "") {
 	vars.pg_warning = "33554432" 
  }
  vars.pg_critical = host.vars.ccp_replication_lag_size_bytes_critical
  if (host.vars.ccp_replication_lag_size_bytes_warning == "") {
 	vars.pg_critical = "67108864" 
  }

  assign where host.vars.pg_primary_with_streaming_replica == "true"
}

/************ END PRIMARY WITH STREAMING REPLICA ONLY ******************/


/*********** REPLICA ONLY *********************/

apply Service "ccp_replication_lag_replay_time" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_replication_lag_replay_time"
  vars.pg_compare  = "1"

  vars.pg_warning = host.vars.ccp_replication_lag_replay_time_warning
  if (host.vars.ccp_replication_lag_replay_time_warning == "") {
    vars.pg_warning = "1800"
  }
  vars.pg_critical = host.vars.ccp_replication_lag_replay_time_critical
  if (host.vars.ccp_replication_lag_replay_time_critical == "") {
    vars.pg_critical = "3600"  
  }

  vars.pg_include = host.vars.ccp_replication_lag_replay_time_include
  vars.pg_exclude = host.vars.ccp_replication_lag_replay_time_exclude

  assign where host.vars.pg_replica == "true"
}

apply Service "ccp_stat_database_conflicts" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_stat_database_conflicts"
  //vars.pg_compare  = "1"
  //vars.pg_warning = host.vars.pg_warning
  //vars.pg_critical = host.vars.pg_critical
  //vars.pg_include = host.vars.pg_include
  //vars.pg_exclude = host.vars.pg_exclude

  assign where host.vars.pg_replica == "true"
}

/*********** END REPLICA ONLY *********************/


/*********** ADDITIONAL DB LEVEL STATS *********************/

apply Service "ccp_stat_database_tup_deleted" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_stat_database_tup_deleted"
  //vars.pg_compare  = "1"
  //vars.pg_warning = host.vars.pg_warning
  //vars.pg_critical = host.vars.pg_critical
  //vars.pg_include = host.vars.pg_include
  //vars.pg_exclude = host.vars.pg_exclude

  assign where host.vars.pg_additional_db_stats == "true"
}

apply Service "ccp_stat_database_tup_fetched" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_stat_database_tup_fetched"
  //vars.pg_compare  = "1"
  //vars.pg_warning = host.vars.pg_warning
  //vars.pg_critical = host.vars.pg_critical
  //vars.pg_include = host.vars.pg_include
  //vars.pg_exclude = host.vars.pg_exclude

  assign where host.vars.pg_additional_db_stats == "true"
}

apply Service "ccp_stat_database_tup_inserted" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_stat_database_tup_inserted"
  //vars.pg_compare  = "1"
  //vars.pg_warning = host.vars.pg_warning
  //vars.pg_critical = host.vars.pg_critical
  //vars.pg_include = host.vars.pg_include
  //vars.pg_exclude = host.vars.pg_exclude

  assign where host.vars.pg_additional_db_stats == "true"
}

apply Service "ccp_stat_database_tup_returned" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_stat_database_tup_returned"
  //vars.pg_compare  = "1"
  //vars.pg_warning = host.vars.pg_warning
  //vars.pg_critical = host.vars.pg_critical
  //vars.pg_include = host.vars.pg_include
  //vars.pg_exclude = host.vars.pg_exclude

  assign where host.vars.pg_additional_db_stats == "true"
}

apply Service "ccp_stat_database_tup_updated" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_stat_database_tup_updated"
  //vars.pg_compare  = "1"
  //vars.pg_warning = host.vars.pg_warning
  //vars.pg_critical = host.vars.pg_critical
  //vars.pg_include = host.vars.pg_include
  //vars.pg_exclude = host.vars.pg_exclude

  assign where host.vars.pg_additional_db_stats == "true"
}

/*********** END ADDITIONAL DB LEVEL STATS *********************/


/****************** BLOAT CHECK *******************/

/** Currently not in use by any clients. Commented out until they are to avoid config check warnings

apply Service "ccp_bloat_check_size_bytes" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_bloat_check_size_bytes"
  //vars.pg_compare  = "1"
  //vars.pg_warning = host.vars.pg_warning
  //vars.pg_critical = host.vars.pg_critical
  //vars.pg_include = host.vars.pg_include
  //vars.pg_exclude = host.vars.pg_exclude

  assign where host.vars.pg_bloat_check == "true"
}

apply Service "ccp_bloat_check_total_wasted_space_bytes" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_bloat_check_total_wasted_space_bytes"
  //vars.pg_compare  = "1"
  //vars.pg_warning = host.vars.pg_warning
  //vars.pg_critical = host.vars.pg_critical
  //vars.pg_include = host.vars.pg_include
  //vars.pg_exclude = host.vars.pg_exclude

  assign where host.vars.pg_bloat_check == "true"
}

*** End comment out block */

/****************** END BLOAT CHECK *******************/


/****************** ADDITIONAL TABLE STATS ****************/

/** Currently not in use by any clients. Commented out until they are to avoid config check warnings

apply Service "ccp_stat_user_tables_analyze_count" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_stat_user_tables_analyze_count"
  //vars.pg_compare  = "1"
  //vars.pg_warning = host.vars.pg_warning
  //vars.pg_critical = host.vars.pg_critical
  //vars.pg_include = host.vars.pg_include
  //vars.pg_exclude = host.vars.pg_exclude

  assign where host.vars.pg_additional_table_stats == "true"
}

apply Service "ccp_stat_user_tables_autoanalyze_count" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_stat_user_tables_autoanalyze_count"
  //vars.pg_compare  = "1"
  //vars.pg_warning = host.vars.pg_warning
  //vars.pg_critical = host.vars.pg_critical
  //vars.pg_include = host.vars.pg_include
  //vars.pg_exclude = host.vars.pg_exclude

  assign where host.vars.pg_additional_table_stats == "true"
}

apply Service "ccp_stat_user_tables_autovacuum_count" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_stat_user_tables_autovacuum_count"
  //vars.pg_compare  = "1"
  //vars.pg_warning = host.vars.pg_warning
  //vars.pg_critical = host.vars.pg_critical
  //vars.pg_include = host.vars.pg_include
  //vars.pg_exclude = host.vars.pg_exclude

  assign where host.vars.pg_additional_table_stats == "true"
}

apply Service "ccp_stat_user_tables_n_tup_del" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_stat_user_tables_n_tup_del"
  //vars.pg_compare  = "1"
  //vars.pg_warning = host.vars.pg_warning
  //vars.pg_critical = host.vars.pg_critical
  //vars.pg_include = host.vars.pg_include
  //vars.pg_exclude = host.vars.pg_exclude

  assign where host.vars.pg_additional_table_stats == "true"
}

apply Service "ccp_stat_user_tables_n_tup_ins" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_stat_user_tables_n_tup_ins"
  //vars.pg_compare  = "1"
  //vars.pg_warning = host.vars.pg_warning
  //vars.pg_critical = host.vars.pg_critical
  //vars.pg_include = host.vars.pg_include
  //vars.pg_exclude = host.vars.pg_exclude

  assign where host.vars.pg_additional_table_stats == "true"
}

apply Service "ccp_stat_user_tables_n_tup_upd" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_stat_user_tables_n_tup_upd"
  //vars.pg_compare  = "1"
  //vars.pg_warning = host.vars.pg_warning
  //vars.pg_critical = host.vars.pg_critical
  //vars.pg_include = host.vars.pg_include
  //vars.pg_exclude = host.vars.pg_exclude

  assign where host.vars.pg_additional_table_stats == "true"
}

apply Service "ccp_stat_user_tables_vacuum_count" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_stat_user_tables_vacuum_count"
  //vars.pg_compare  = "1"
  //vars.pg_warning = host.vars.pg_warning
  //vars.pg_critical = host.vars.pg_critical
  //vars.pg_include = host.vars.pg_include
  //vars.pg_exclude = host.vars.pg_exclude

  assign where host.vars.pg_additional_table_stats == "true"
}

apply Service "ccp_table_size_size_bytes" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_postgres
  vars.pg_action   = "ccp_table_size_size_bytes"
  //vars.pg_compare  = "1"
  //vars.pg_warning = host.vars.pg_warning
  //vars.pg_critical = host.vars.pg_critical
  //vars.pg_include = host.vars.pg_include
  //vars.pg_exclude = host.vars.pg_exclude

  assign where host.vars.pg_additional_table_stats == "true"
}

*** End comment out block */

/****************** END ADDITIONAL TABLE STATS ****************/

