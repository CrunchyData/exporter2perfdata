
/************** NODE COMMON METRICS ********************/

apply Service "ccp_pg_ready" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_node

  vars.pg_action   = "ccp_pg_ready"
  /* Checks to see if the given system is NOT (compare = 3) a primary (return value 2) by default.
   * Set on a per-host basis to be able to check whether a system is no longer a replica (return value 1)
   */
  vars.pg_compare  = "3"
  vars.pg_critical  = host.vars.ccp_pg_ready_critical
  if (host.vars.ccp_pg_ready_critical == "") {
          vars.pg_critical = "2"
  }

  assign where host.vars.node_common == "true"
}


apply Service "node_disk_reads_completed" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_node

  vars.pg_action   = "node_disk_reads_completed"
  //vars.pg_compare  = "1"
  //vars.pg_warning  = ""
  //vars.pg_critical = ""
  //vars.pg_include  = ""
  //vars.pg_exclude  = ""

  assign where host.vars.node_common == "true"
}

apply Service "node_disk_sectors_read" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_node

  vars.pg_action   = "node_disk_sectors_read"
  //vars.pg_compare  = "1"
  //vars.pg_warning  = ""
  //vars.pg_critical = ""
  //vars.pg_include  = ""
  //vars.pg_exclude  = ""

  assign where host.vars.node_common == "true"
}

apply Service "node_disk_sectors_written" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_node

  vars.pg_action   = "node_disk_sectors_written"
  //vars.pg_compare  = "1"
  //vars.pg_warning  = ""
  //vars.pg_critical = ""
  //vars.pg_include  = ""
  //vars.pg_exclude  = ""

  assign where host.vars.node_common == "true"
}

apply Service "node_disk_writes_completed" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_node

  vars.pg_action   = "node_disk_writes_completed"
  //vars.pg_compare  = "1"
  //vars.pg_warning  = ""
  //vars.pg_critical = ""
  //vars.pg_include  = ""
  //vars.pg_exclude  = ""

  assign where host.vars.node_common == "true"
}

apply Service "node_filesystem_free" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_node

  vars.pg_action   = "node_filesystem_free"
  //vars.pg_compare  = "1"
  //vars.pg_warning  = ""
  //vars.pg_critical = ""

  if (host.vars.node_filesystem_include != "") {
    vars.pg_include  = host.vars.node_filesystem_include
  }

  if (host.vars.node_filesystem_exclude != "") {
    vars.pg_exclude  = host.vars.node_filesystem_exclude
  } 

  assign where host.vars.node_common == "true"
}

apply Service "node_filesystem_size" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_node

  vars.pg_action   = "node_filesystem_size"
  //vars.pg_compare  = "1"
  //vars.pg_warning  = ""
  //vars.pg_critical = ""

  if (host.vars.node_filesystem_include != "") {
    vars.pg_include  = host.vars.node_filesystem_include
  }

  if (host.vars.node_filesystem_exclude != "") {
    vars.pg_exclude  = host.vars.node_filesystem_exclude
  } 

  assign where host.vars.node_common == "true"
}

apply Service "node_load5" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_node

  vars.pg_action   = "node_load5"
  vars.pg_compare  = "1"
  vars.pg_warning  = host.vars.node_load5_warning 
  if (host.vars.node_load5_warning == "") {
    vars.pg_warning = 5 
  }
  vars.pg_critical = host.vars.node_load5_critical
  if (host.vars.node_load5_critical == "") {
    vars.pg_critical = 10
  }

  // Allow per-host configured downtimes
  if (host.vars.known_high_load_downtime != "") {
    vars.known_high_load_downtime = host.vars.known_high_load_downtime
  }

  vars.known_high_load_fixed = true
  if (host.vars.known_high_load_fixed != "") {
    vars.known_high_load_fixed = host.vars.known_high_load_fixed
  }

  vars.known_high_load_duration = host.vars.known_high_load_duration

/*
  if (host.vars.times_begin_node_load5 != "") {
    vars.times_begin_service = host.vars.times_begin_node_load5
  }
*/
  assign where host.vars.node_common == "true"
}

apply Service "node_memory_Buffers" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_node

  vars.pg_action   = "node_memory_Buffers"
  //vars.pg_compare  = "1"
  //vars.pg_warning  = ""
  //vars.pg_critical = ""
  //vars.pg_include  = ""
  //vars.pg_exclude  = ""

  assign where host.vars.node_common == "true"
}

apply Service "node_memory_Cached" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_node

  vars.pg_action   = "node_memory_Cached"
  //vars.pg_compare  = "1"
  //vars.pg_warning  = ""
  //vars.pg_critical = ""
  //vars.pg_include  = ""
  //vars.pg_exclude  = ""

  assign where host.vars.node_common == "true"
}

apply Service "node_memory_MemAvailable" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_node

  vars.pg_action   = "node_memory_MemAvailable"
  // Watch for values to be less than given thresholds
  vars.pg_compare  = "2"

  // Must use hardcoded byte value from Host file for now until comparison is done at pg_metric level
  // Currently assumed to be 25% of total for warning and 10% of total for critical
  vars.pg_warning  = 0
  if (host.vars.mem_available_warning != "") {
      vars.pg_warning  = host.vars.mem_available_warning
  }
  vars.pg_critical = 0
  if (host.vars.mem_available_critical != "") {
    vars.pg_critical = host.vars.mem_available_critical
  }

  assign where host.vars.node_common == "true"
}

apply Service "node_memory_MemFree" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_node

  vars.pg_action   = "node_memory_MemFree"
  //vars.pg_compare  = "1"
  //vars.pg_warning  = ""
  //vars.pg_critical = ""
  //vars.pg_include  = ""
  //vars.pg_exclude  = ""

  assign where host.vars.node_common == "true"
}

apply Service "node_memory_MemTotal" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_node

  vars.pg_action   = "node_memory_MemTotal"
  //vars.pg_compare  = "1"
  //vars.pg_warning  = ""
  //vars.pg_critical = ""
  //vars.pg_include  = ""
  //vars.pg_exclude  = ""

  assign where host.vars.node_common == "true"
}

apply Service "node_memory_SwapCached" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_node

  vars.pg_action   = "node_memory_SwapCached"
  //vars.pg_compare  = "1"
  //vars.pg_warning  = ""
  //vars.pg_critical = ""
  //vars.pg_include  = ""
  //vars.pg_exclude  = ""

  assign where host.vars.node_common == "true"
}

apply Service "node_memory_SwapFree" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_node

  vars.pg_action   = "node_memory_SwapFree"
  // Watch for values to be less than given thresholds
  vars.pg_compare  = "2"

  vars.pg_warning  = 0
  // Must use hardcoded byte value from Host file for now until comparison is done at pg_metric level
  // Currently assumed to be 25% of total for warning and 10% of total for critical
  if (host.vars.swap_free_warning != "") {
      vars.pg_warning  = host.vars.swap_free_warning
  }
  vars.pg_critical = 0
  if (host.vars.swap_free_critical != "") {
      vars.pg_critical = host.vars.swap_free_critical
  }


  assign where host.vars.node_common == "true"
}

apply Service "node_memory_SwapTotal" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_node

  vars.pg_action   = "node_memory_SwapTotal"
  //vars.pg_compare  = "1"
  //vars.pg_warning  = ""
  //vars.pg_critical = ""
  //vars.pg_include  = ""
  //vars.pg_exclude  = ""

  assign where host.vars.node_common == "true"
}


/************** NODE COMMON METRICS ********************/


/************** ADDITIONAL CPU METRICS ********************/

/**** node_cpu creates too much data on multi-core systems. Need avg capability. 
 * Only activate if needed. Leaving commented out to avoid config warning of non-use 


apply Service "node_cpu" {
  import "generic-service"

  check_command    = "pg_metric"
  vars.pg_url      = host.vars.pg_url_node

  vars.pg_action   = "node_cpu"
  //vars.pg_compare  = "1"
  //vars.pg_warning  = ""
  //vars.pg_critical = ""
  vars.pg_include  = host.vars.node_cpu_include
  if (host.vars.node_cpu_include == "") {
        vars.pg_include  = "mode_idle,mode_system,mode_user,mode_iowait"
  }
  //vars.pg_exclude  = ""

  assign where host.vars.node_additional_cpu == "true"
}

*** End comment out block */

/************** END ADDITIONAL CPU METRICS ********************/



